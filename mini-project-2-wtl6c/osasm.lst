


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ; OSasm.s: low-level OS commands, written in assembly   
                                           */
    3 00000000         ; Runs on LM4F120/TM4C123
    4 00000000         ; A very simple real time operating system with minimal 
                       features.
    5 00000000         ; Daniel Valvano
    6 00000000         ; January 29, 2015
    7 00000000         ;
    8 00000000         ; This example accompanies the book
    9 00000000         ;  "Embedded Systems: Real Time Interfacing to ARM Corte
                       x M Microcontrollers",
   10 00000000         ;  ISBN: 978-1463590154, Jonathan Valvano, copyright (c)
                        2015
   11 00000000         ;
   12 00000000         ;  Programs 4.4 through 4.12, section 4.2
   13 00000000         ;
   14 00000000         ;Copyright 2015 by Jonathan W. Valvano, valvano@mail.ute
                       xas.edu
   15 00000000         ;    You may use, edit, run or distribute this file
   16 00000000         ;    as long as the above copyright notice remains
   17 00000000         ; THIS SOFTWARE IS PROVIDED "AS IS".  NO WARRANTIES, WHE
                       THER EXPRESS, IMPLIED
   18 00000000         ; OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED W
                       ARRANTIES OF
   19 00000000         ; MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE A
                       PPLY TO THIS SOFTWARE.
   20 00000000         ; VALVANO SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR
                        SPECIAL, INCIDENTAL,
   21 00000000         ; OR CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
   22 00000000         ; For more information about my classes, my research, an
                       d my books, see
   23 00000000         ; http://users.ece.utexas.edu/~valvano/
   24 00000000         ; */
   25 00000000         
   26 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   27 00000000                 THUMB
   28 00000000                 REQUIRE8
   29 00000000                 PRESERVE8
   30 00000000         
   31 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   32 00000000                 EXPORT           OS_DisableInterrupts
   33 00000000                 EXPORT           OS_EnableInterrupts
   34 00000000                 EXPORT           StartOS
   35 00000000                 EXPORT           SysTick_Handler
   36 00000000         
   37 00000000         
   38 00000000         OS_DisableInterrupts
   39 00000000 B672            CPSID            I
   40 00000002 4770            BX               LR
   41 00000004         
   42 00000004         
   43 00000004         OS_EnableInterrupts
   44 00000004 B662            CPSIE            I
   45 00000006 4770            BX               LR
   46 00000008         



ARM Macro Assembler    Page 2 


   47 00000008                 IMPORT           Scheduler
   48 00000008         SysTick_Handler                      ; 1) Saves R0-R3,R1
                                                            2,LR,PC,PSR
   49 00000008 B672            CPSID            I           ; 2) Prevent interr
                                                            upt during switch
   50 0000000A E92D 0FF0       PUSH             {R4-R11}    ; 3) Save remaining
                                                             regs r4-11
   51 0000000E 4810            LDR              R0, =RunPt  ; 4) R0=pointer to 
                                                            RunPt, old thread
   52 00000010 6801            LDR              R1, [R0]    ;    R1 = RunPt
   53 00000012 F8C1 D000       STR              SP, [R1]    ; 5) Save SP into T
                                                            CB
   54 00000016 B501            PUSH             {R0,LR}     ;
   55 00000018 F7FF FFFE       BL               Scheduler   ;
   56 0000001C E8BD 4001       POP              {R0,LR}     ;
   57 00000020 6801            LDR              R1, [R0]    ; 6) R1 = RunPt, ne
                                                            w thread
   58 00000022 F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RunPt->sp;
   59 00000026 E8BD 0FF0       POP              {R4-R11}    ; 8) restore regs r
                                                            4-11
   60 0000002A B662            CPSIE            I           ; 9) tasks run with
                                                             interrupts enabled
                                                            
   61 0000002C 4770            BX               LR          ; 10) restore R0-R3
                                                            ,R12,LR,PC,PSR
   62 0000002E         
   63 0000002E         StartOS
   64 0000002E 4808            LDR              R0, =RunPt  ; currently running
                                                             thread
   65 00000030 6802            LDR              R2, [R0]    ; R2 = value of Run
                                                            Pt
   66 00000032 F8D2 D000       LDR              SP, [R2]    ; new thread SP; SP
                                                             = RunPt->stackPoin
                                                            ter;
   67 00000036 E8BD 0FF0       POP              {R4-R11}    ; restore regs r4-1
                                                            1
   68 0000003A BC0F            POP              {R0-R3}     ; restore regs r0-3
                                                            
   69 0000003C F85D CB04       POP              {R12}
   70 00000040 F85D EB04       POP              {LR}        ; discard LR from i
                                                            nitial stack
   71 00000044 F85D EB04       POP              {LR}        ; start location
   72 00000048 BC02            POP              {R1}        ; discard PSR
   73 0000004A B662            CPSIE            I           ; Enable interrupts
                                                             at processor level
                                                            
   74 0000004C 4770            BX               LR          ; start first threa
                                                            d
   75 0000004E         
   76 0000004E 00 00           ALIGN
   77 00000050                 END
              00000000 
Command Line: --debug --xref --cpu=Cortex-M4 --apcs=interwork --depend=.\osasm.
d -o.\osasm.o -IC:\Keil\ARM\RV31\INC -IC:\Keil\ARM\CMSIS\Include -IC:\Keil\ARM\
Inc\TI\TM4C123 --predefine="__EVAL SETA 1" --predefine="__MICROLIB SETA 1" --li
st=.\osasm.lst osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 26 in file osasm.s
   Uses
      None
Comment: .text unused
OS_DisableInterrupts 00000000

Symbol: OS_DisableInterrupts
   Definitions
      At line 38 in file osasm.s
   Uses
      At line 32 in file osasm.s
Comment: OS_DisableInterrupts used once
OS_EnableInterrupts 00000004

Symbol: OS_EnableInterrupts
   Definitions
      At line 43 in file osasm.s
   Uses
      At line 33 in file osasm.s
Comment: OS_EnableInterrupts used once
StartOS 0000002E

Symbol: StartOS
   Definitions
      At line 63 in file osasm.s
   Uses
      At line 34 in file osasm.s
Comment: StartOS used once
SysTick_Handler 00000008

Symbol: SysTick_Handler
   Definitions
      At line 48 in file osasm.s
   Uses
      At line 35 in file osasm.s
Comment: SysTick_Handler used once
5 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

RunPt 00000000

Symbol: RunPt
   Definitions
      At line 31 in file osasm.s
   Uses
      At line 51 in file osasm.s
      At line 64 in file osasm.s

Scheduler 00000000

Symbol: Scheduler
   Definitions
      At line 47 in file osasm.s
   Uses
      At line 55 in file osasm.s
Comment: Scheduler used once
2 symbols
341 symbols in table
